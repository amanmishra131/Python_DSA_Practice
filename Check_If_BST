import queue
q = queue.Queue()

class BTree :
    def __init__(self,data):
        self.data = data
        self.left = None
        self.right = None

def takeinput():
    print("Enter the Node : ")
    node = int(input())
    if node == - 1:
        return None
    root = BTree(node)
    q.put(root)
    # print("my node is : " ,root.data)
    while not q.empty():
        current = q.get()
        # print("left child of ",current.data)
        left = int(input())
        if left != -1:
            leftnode = BTree(left)
            current.left = leftnode
            q.put(leftnode)

        # print("right child of ", current.data)
        right = int(input())
        if right != -1 :
            rightnode = BTree(right)
            current.right = rightnode
            q.put(rightnode)
    return root

def printLevelWise(root):
    # Your code goes here
    if root == None:
        return
    q.put(root)
    while not q.empty():
        currNode = q.get()
        print(currNode.data,end=":")
        if currNode.left != None :
            print("L:",currNode.left.data,end=",")
            q.put(currNode.left)
        else:
            print("L:-1", end=",")
        if currNode.right != None:
            print("R:",currNode.right.data)
            q.put(currNode.right)
        else:
            print("R:-1", end="")
            print()
    return root




# ________________________First pgm in O(n log n ) in balanced_____________________________________________________________________________________________________________
# def maxBT(root):
#     if root is None:
#         return 0
#
#     left = max(root.left)
#     right = max(root.right)
#     return max(root.data , left , right )
#
# def minBT(root):
#     if root is None:
#         return 0
#
#     left = min(root.left)
#     right = min(root.right)
#     return min(root.data , left , right )
#
#
# def isBST(root):
#     if root is None:
#         return True
#     leftmax = maxBT(root.left)
#     rightmin = minBT(root.right)
#     if root.data > rightmin or root.data <= leftmax :
#         return False
#     left = isBST(root.left)
#     right = isBST(root.right)
#     return left and right


# ____________________second pgm for check IsBST in O(n)_____________________________________________________________________________________________________________
# def isBST(root):
#     if root == None:
#         return True, -1000, 1000
#
#     LBST, Lmax, Lmin = isBST(root.left)
#     RBST, Rmax, Rmin = isBST(root.right)
#
#     if root.data <= Lmax or root.data > Rmin:
#         return False, max(root.data, Lmax, Rmax), min(root.data, Lmin, Rmin)
#
#     return LBST and RBST, max(root.data, Lmax, Rmax), min(root.data, Lmin, Rmin)

#_____________________3rd function for checking  in O(n)_____________________________________________________________________________________________________________
# def isBst(root, min, max):
#     if root == None:
#         return True
#     if root.data > max or root.data <= min:
#         return False
#     left  = isBst(root.left, min, root.data-1)
#     right = isBst(root.right, root.data, max)
#     return left and right

root = takeinput()

printLevelWise(root)

print(isBST(root))                 # we hAVE 3 Fuction for this use as per your choice  :)
